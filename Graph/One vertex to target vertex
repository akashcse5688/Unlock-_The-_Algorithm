#include<bits/stdc++.h>
using namespace std;

void bfs(int start, int last, vector<vector<int>>& adj) {
    queue<int> q;
    q.push(start);
    vector<int> parent(adj.size(), -1);
    vector<bool> visited(adj.size(), false);
    visited[start] = true;

    while (!q.empty()) {
        int curr = q.front();
        q.pop();

        for (int child : adj[curr]) {
            if (!visited[child]) {
                visited[child] = true;
                parent[child] = curr;
                q.push(child);
            }
        }
    }

    vector<int> path;
    int node = last;
    while (node != -1) {
        path.push_back(node);
        node = parent[node];
    }
    reverse(path.begin(), path.end());

    int ans = path.size() - 2;
    cout << ans << endl;
    for (auto it : path) cout << it << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;
    for (int c = 1; c <= t; c++) {
        int n, s, e;
        cin >> n >> s >> e;
        vector<vector<int>> adj(n + 1);

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                int x;
                cin >> x;
                if (x == 1) adj[i].push_back(j);
            }
        }
        cout << "Case " << c << ":\n";
        bfs(s, e, adj);
    }
    return 0;
}
